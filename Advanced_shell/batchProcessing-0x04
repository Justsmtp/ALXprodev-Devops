#!/bin/bash

# Create output directory
mkdir -p pokemon_data

# List of Pokémon
pokemon_list=(bulbasaur ivysaur venusaur charmander charmeleon)

# Function to fetch data
fetch_pokemon() {
    local pokemon="$1"
    echo "Fetching data for $pokemon..."
    response=$(curl -s -w "%{http_code}" -o "pokemon_data/${pokemon}.json" "https://pokeapi.co/api/v2/pokemon/$pokemon")
    http_code=${response:(-3)}

    if [[ "$http_code" == "200" ]]; then
        echo "Saved data to pokemon_data/${pokemon}.json ✅"
    else
        echo "Failed to fetch data for $pokemon (HTTP $http_code)" | tee -a pokemon_data/fetch_errors.log
        rm -f "pokemon_data/${pokemon}.json"
    fi
}

# Clear previous log
> pokemon_data/fetch_errors.log

# Track PIDs
pids=()

# Start background jobs and record PIDs
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Timeout logic (optional safety net)
TIMEOUT=15
SECONDS=0

# Wait for all background jobs
for pid in "${pids[@]}"; do
    # Wait with timeout logic
    while kill -0 "$pid" 2>/dev/null; do
        if (( SECONDS > TIMEOUT )); then
            echo "⏱ Timeout! Killing PID $pid"
            kill "$pid"
            echo "Process $pid was killed due to timeout." >> pokemon_data/fetch_errors.log
            break
        fi
        sleep 1
    done
done

echo "✅ All Pokémon data fetched (parallel with process control)."
